plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
    id 'jacoco'
}

group = 'com.fallabella.challenge'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    mapstructVersion = "1.3.1.Final"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation 'org.springdoc:springdoc-openapi-common:1.5.9'
    compileOnly 'org.projectlombok:lombok'
    compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/fallabella/challenge/product/model/**',
                                        'com/fallabella/challenge/product/bean/**',
                                        'com/fallabella/challenge/product/util/**',
                                        'com/fallabella/challenge/product/mapper/**',
                                        'com/fallabella/challenge/product/MsaProductServiceApplication.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/fallabella/challenge/product/model/**',
                                        'com/fallabella/challenge/product/bean/**',
                                        'com/fallabella/challenge/product/util/**',
                                        'com/fallabella/challenge/product/mapper/**',
                                        'com/fallabella/challenge/product/MsaProductServiceApplication.class'
            ])
        }))
    }
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 0.85
            }
        }

        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3

            }
        }
    }
}